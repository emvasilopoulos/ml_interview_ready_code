#  Autogenerated - will study later
# class OneObjectOrdinalRegressionHead(nn.Module):
#     def __init__(self, in_channels, num_classes, num_anchors, num_ordinal_bins, num_layers=4, num_filters=256):
#         super(OneObjectOrdinalRegressionHead, self).__init__()
#         self.num_classes = num_classes
#         self.num_anchors = num_anchors
#         self.num_ordinal_bins = num_ordinal_bins
#         self.num_layers = num_layers
#         self.num_filters = num_filters

#         self.conv_layers = nn.ModuleList()
#         self.conv_layers.append(nn.Conv2d(in_channels, num_filters, kernel_size=3, padding=1))
#         for _ in range(num_layers - 1):
#             self.conv_layers.append(nn.Conv2d(num_filters, num_filters, kernel_size=3, padding=1))
#         self.conv_layers.append(nn.Conv2d(num_filters, num_anchors * (num_classes + num_ordinal_bins), kernel_size=3, padding=1))

#     def forward(self, x):
#         for layer in self.conv_layers:
#             x = F.relu(layer(x))
#         return x

#     def loss(self, pred, target):
#         pred = pred.permute(0, 2, 3, 1).contiguous().view(-1, self.num_classes + self.num_ordinal_bins)
#         target = target.permute(0, 2, 3, 1).contiguous().view(-1, self.num_classes + self.num_ordinal_bins)

#         # classification loss
#         cls_pred = pred[:, :self.num_classes]
#         cls_target = target[:, :self.num_classes]
#         cls_loss = F.cross_entropy(cls_pred, cls_target.argmax(dim=1), reduction='none')

#         # ordinal regression loss
#         ord_pred = pred[:, self.num_classes:]
#         ord_target = target[:, self.num_classes:]
#         ord_loss = F.cross_entropy(ord_pred, ord_target.argmax(dim=1), reduction='none')

#         return cls_loss, ord_loss

#     def decode(self, pred, score_thresh=0.5, nms_thresh=0.5):
#         pred = pred.permute(0, 2, 3, 1).contiguous().view(-1, self.num_classes + self.num_ordinal_bins)
#         cls_pred = pred[:, :self.num_classes]
#         ord_pred = pred[:, self.num_classes:]

#         cls_scores = F.softmax(cls_pred, dim=1)
